
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: secure-messaging-db
    environment:
      POSTGRES_DB: secure_messaging
      POSTGRES_USER: secure_user
      POSTGRES_PASSWORD: secure_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - secure-messaging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secure_user -d secure_messaging"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: secure-messaging-backend
    environment:
      # Database connection for Docker environment
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/secure_messaging
      DB_USERNAME: secure_user
      DB_PASSWORD: secure_password
      
      # JPA/Hibernate settings
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false
      
      # Server settings
      SERVER_PORT: 8080
      
      # Security settings
      SPRING_SECURITY_REQUIRE_SSL: false
      
      # CORS settings for development
      APP_SECURITY_CORS_ALLOWED_ORIGINS_0: http://localhost:3000
      APP_SECURITY_CORS_ALLOWED_ORIGINS_1: https://localhost:3000
      
      # Logging
      LOGGING_LEVEL_COM_EXAMPLE_SECUREMESSAGING: INFO
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - secure-messaging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

networks:
  secure-messaging-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local